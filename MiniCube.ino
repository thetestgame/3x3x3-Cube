// * These objects define the patterns for your LED CUBE. 
// * In the table[][]= {element_1,element_2,element_3,element_4},
// *
// * The element_1(HEX Value) controls the bottom layer of LED Cube
// * The element_2(HEX Value) controls the middle layer of LED Cube
// * The element_3(HEX Value) controls the top layer of LED Cube
// * The element_4(HEX Value) controls the speed and brightness. 
// *      Example:0x02ff, 
// *             02 controls the speed (delay time)
// *             ff is LED brightness; you can modify the value range 0~255. 
// *
// * Common Hex values for Rows:
// * 
// *    0x007 = Lights LED Row 1-2-3
// *    0x038 = Lights LED Row 4-5-6
// *    0x1c0 = Lights LED Row 7-8-9
// *    0x049 = Lights LED Row 1-4-7
// *    0x092 = Lights LED Row 2-5-8
// *    0x124 = Lights LED Row 3-6-9
// *    0x111 = Lights Diagonal LED Row 1-5-9
// *    0x054 = Lights Diagonal LED Row 3-5-7
// *
// *    0x1ff = Lights the entire level
// ***********************************************************************************************************
       
#define steps 128
unsigned int animations[][4]={
//         Merry-go-round

{0x038,0x038,0x038,0x01ff}, 
{0x111,0x111,0x111,0x01ff}, 
{0x092,0x092,0x092,0x01ff},                      
{0x054,0x054,0x054,0x01ff}, 
{0x038,0x038,0x038,0x01ff},
{0x111,0x111,0x111,0x01ff},
{0x092,0x092,0x092,0x01ff},                             
{0x054,0x054,0x054,0x01ff},
{0x038,0x038,0x038,0x01ff},
{0x111,0x111,0x111,0x01ff},
{0x092,0x092,0x092,0x01ff},                             
{0x054,0x054,0x054,0x01ff},
{0x038,0x038,0x038,0x01ff},
{0x111,0x111,0x111,0x01ff},
{0x092,0x092,0x092,0x01ff},                             
{0x054,0x054,0x054,0x01ff}, 
 
//         Merry-go-round 2

{0x000,0x000,0x038,0x02ff}, 
{0x000,0x000,0x111,0x02ff},
{0x000,0x038,0x092,0x02ff},                            
{0x000,0x111,0x054,0x02ff}, 
{0x000,0x092,0x038,0x02ff},
{0x038,0x054,0x111,0x02ff},
{0x111,0x038,0x092,0x02ff},                             
{0x092,0x111,0x054,0x02ff},
{0x054,0x092,0x038,0x02ff},
{0x038,0x054,0x111,0x02ff},
{0x111,0x038,0x092,0x02ff},                             
{0x092,0x111,0x054,0x02ff},
{0x054,0x092,0x038,0x02ff},
{0x038,0x054,0x000,0x02ff},
{0x111,0x038,0x000,0x02ff},                             
{0x092,0x000,0x000,0x02ff},  
 
 
//         Ferris Wheel 1
{0x000,0x1ff,0x000,0x02ff}, 
{0x007,0x038,0x1c0,0x02ff}, 
{0x038,0x038,0x038,0x02ff}, 
{0x1c0,0x038,0x007,0x02ff}, 
{0x000,0x1ff,0x000,0x02ff},
{0x007,0x038,0x1c0,0x02ff}, 
{0x038,0x038,0x038,0x02ff},
{0x1c0,0x038,0x007,0x02ff},
{0x000,0x1ff,0x000,0x02ff},
{0x007,0x038,0x1c0,0x02ff}, 
{0x038,0x038,0x038,0x02ff},
{0x1c0,0x038,0x007,0x02ff},
{0x000,0x1ff,0x000,0x02ff},
{0x007,0x038,0x1c0,0x02ff}, 
{0x038,0x038,0x038,0x02ff},
{0x1c0,0x038,0x007,0x02ff}, 

//         Ferris Wheel 2

{0x092,0x092,0x092,0x02ff}, 
{0x124,0x092,0x049,0x02ff}, 
{0x000,0x1ff,0x000,0x02ff}, 
{0x049,0x092,0x124,0x02ff}, 
{0x092,0x092,0x092,0x02ff}, 
{0x124,0x092,0x049,0x02ff}, 
{0x000,0x1ff,0x000,0x02ff},
{0x049,0x092,0x124,0x02ff}, 
{0x092,0x092,0x092,0x02ff}, 
{0x124,0x092,0x049,0x02ff}, 
{0x000,0x1ff,0x000,0x02ff},
{0x049,0x092,0x124,0x02ff}, 
{0x092,0x092,0x092,0x02ff}, 
{0x124,0x092,0x049,0x02ff}, 
{0x000,0x1ff,0x000,0x02ff},
{0x049,0x092,0x124,0x02ff},       
                              
//         Elevator

{0x1ff,0x000,0x000,0x06ff}, 
{0x000,0x1ff,0x000,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff},                          
{0x000,0x000,0x1ff,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff},
{0x000,0x000,0x1ff,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff},
{0x000,0x1ff,0x000,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff}, 
{0x000,0x1ff,0x000,0x06ff},
{0x1ff,0x000,0x000,0x06ff}, 
{0x000,0x1ff,0x000,0x06ff}, 
{0x000,0x000,0x1ff,0x06ff},
{0x000,0x1ff,0x000,0x06ff}, 


//         Spiral
{0x007,0x007,0x007,0x06ff}, 
{0x111,0x111,0x111,0x02ff}, 
{0x049,0x049,0x049,0x06ff},                      
{0x054,0x054,0x054,0x02ff}, 
{0x1c0,0x1c0,0x1c0,0x06ff}, 
{0x111,0x111,0x111,0x02ff},
{0x124,0x124,0x124,0x06ff}, 
{0x054,0x054,0x054,0x02ff}, 
 
{0x007,0x007,0x007,0x06ff}, 
{0x111,0x111,0x111,0x02ff},
{0x049,0x049,0x049,0x06ff},
{0x054,0x054,0x054,0x02ff},
{0x1c0,0x1c0,0x1c0,0x06ff},
{0x111,0x111,0x111,0x02ff},
{0x124,0x124,0x124,0x06ff}, 
{0x054,0x054,0x054,0x02ff},                     

//         Sweeper
{0x007,0x007,0x007,0x06ff}, 
{0x038,0x038,0x038,0x06ff}, 
{0x1c0,0x1c0,0x1c0,0x06ff}, 
{0x111,0x111,0x111,0x02ff}, 
{0x124,0x124,0x124,0x06ff}, 
{0x092,0x092,0x092,0x06ff},
{0x049,0x049,0x049,0x06ff},                        
{0x111,0x111,0x111,0x02ff}, 
                              
{0x007,0x007,0x007,0x06ff}, 
{0x038,0x038,0x038,0x06ff}, 
{0x1c0,0x1c0,0x1c0,0x06ff}, 
{0x111,0x111,0x111,0x02ff},
{0x124,0x124,0x124,0x06ff},
{0x092,0x092,0x092,0x06ff}, 
{0x049,0x049,0x049,0x06ff},                              
{0x111,0x111,0x111,0x02ff},     

//         Raindrops
{0x000,0x000,0x001,0x02ff}, 
{0x000,0x001,0x010,0x02ff}, 
{0x001,0x010,0x100,0x02ff}, 
{0x010,0x100,0x010,0x02ff}, 
{0x100,0x010,0x020,0x02ff}, 
{0x010,0x020,0x001,0x02ff}, 
{0x020,0x001,0x010,0x02ff}, 
{0x001,0x010,0x004,0x02ff}, 
 
{0x010,0x004,0x001,0x02ff}, 
{0x004,0x001,0x010,0x02ff}, 
{0x001,0x010,0x000,0x02ff}, 
{0x010,0x000,0x100,0x02ff}, 
{0x000,0x100,0x050,0x02ff}, 
{0x100,0x050,0x001,0x02ff}, 
{0x050,0x001,0x000,0x02ff}, 
{0x001,0x000,0x000,0x02ff},                              

};


void setup() { 
  for(int a=2;a<=13;a++)
    pinMode(a, OUTPUT); 
}

void loop() {
    for(int s=0;s<steps;s++) {
      for(int b=0;b<(animations[s][3]>>8);b++) {
        for(int i=0;i<33;i++) {
          digitalWrite(2,(animations[s][i%3]&0x1));
          digitalWrite(4,(animations[s][i%3]&0x2));   
          digitalWrite(7,(animations[s][i%3]&0x4));
          digitalWrite(8,(animations[s][i%3]&0x8));
          digitalWrite(9,(animations[s][i%3]&0x10));   
          digitalWrite(10,(animations[s][i%3]&0x20)); 
          digitalWrite(11,(animations[s][i%3]&0x40));
          digitalWrite(12,(animations[s][i%3]&0x80));   
          digitalWrite(13,((animations[s][i%3]&0x100)>>1));
          if(i%3==0)
            analogWrite(3,(0xff-(animations[s][3]&0xff)));  
          else if(i%3==1)
            analogWrite(5,(0xff-(animations[s][3]&0xff)));        
          else if(i%3==2)
            analogWrite(6,(0xff-(animations[s][3]&0xff)));        
          delay(2); 
          digitalWrite(3,1); 
          digitalWrite(5,1);
          digitalWrite(6,1);            
        }          
     }   
  }
}
